using System;
using System.Collections;
using System.Collections.Generic;
using UnityEditor.PackageManager;
using UnityEngine;

public class Gun : MonoBehaviour
{
    public Transform bulletImpact; //총알 파편 효과
    ParticleSystem bulletEffect; //총알 파편 파티클 시스템
    AudioSource bulletAudio; // 총알 발사 사운드
    public Transform crosshair; //조준점 표시

    [SerializeField] PlayerStatController playerStats;


    void Start()
    {
        bulletEffect = bulletImpact.GetComponent<ParticleSystem>();
        bulletAudio = GetComponent<AudioSource>();
        if (playerStats == null)
            playerStats = GetComponentInParent<PlayerStatController>();
        if (playerStats == null)
            Debug.LogError("Gun Start() : PlayerStatController is Null");
        //    Cursor.visible = false;
    }

    void Update()
    {
        //크로스헤어 표시
        ARAVRInput.DrawCrosshair(crosshair);

        //오른쪽 컨트롤러의 인덱스 트리거를 눌렀다면 
        if (ARAVRInput.GetDown(ARAVRInput.Button.IndexTrigger))
        {
            //컨트롤러의 진동 재생
            ARAVRInput.PlayVibration(ARAVRInput.Controller.RTouch);

            // 데미지 계산값 받아오기
            int damage = playerStats.GetCurrentAttack();
            Fire(damage);
        }
    }
    void Fire(int damage)
    {
        Debug.LogWarning($"Gun Fire() : curDamage -> {damage}");
        var ray = new Ray(ARAVRInput.RHandPosition, ARAVRInput.RHandDirection);
        int ignore = (1 << LayerMask.NameToLayer("Player")) |
                     (1 << LayerMask.NameToLayer("Tower")) |
                     (1 << LayerMask.NameToLayer("Boundary"));

        if (Physics.Raycast(ray, out RaycastHit hitInfo, 200f, ~ignore))
        {
            // 레이와 부딪힌 오브젝트가 드론이라면.. 
            if (hitInfo.transform.name.Contains("Drone"))
            {
                DroneAI drone = hitInfo.transform.GetComponent<DroneAI>();
                if (drone)
                {
                    drone.OnDamageProcess(damage);

                    // 사망 판단 및 ScoreManager.Instance.AddKill() 호출
                }
            }

            PlayFireEffect(hitInfo);
        }
    }

    void PlayFireEffect(RaycastHit hitinfo)
    {
        //총알 파편 처리
        //총알 이펙트가 진행 중이면 멈추고 재생
        bulletEffect.Stop();
        bulletEffect.Play();
        //부딪힌 지점의 방향으로 총알의 이펙트 방향을 설정
        bulletImpact.forward = hitinfo.normal;
        //부딪힌 지점 바로 위에서 이펙트가 보이도록 설정
        bulletImpact.position = hitinfo.point;
    }
}
